<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--在此配置数据表连接信息-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"
          p:url="${datasource.webapp.jdbc.url}"
          p:username="${datasource.webapp.jdbc.username}"
          p:password="${datasource.webapp.jdbc.password}"
          p:maxActive="${datasource.webapp.pool.maxActive}"
          p:initialSize="${datasource.webapp.pool.initialSize}"
          p:minIdle="${datasource.webapp.pool.minIdle}">
    <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="500"/>

    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="validationQueryTimeout" value="1"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

    <!-- 当程序存在缺陷时，申请的连接忘记关闭，这时候，就存在连接泄漏了。Druid提供了RemoveAbandanded相关配置，用来关闭长时间不使用的连接。 -->
        <property name="removeAbandoned" value="true"/> <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandonedTimeout" value="3900"/> <!-- 900秒，也就是15分钟 -->

    <!-- 打开PSCache，并且指定每个连接上PSCache的大小。如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
    <!--<property name="filters" value="stat,log4j"/>-->
    </bean>

    <!--SqlSessionFactory是创建SqlSession的工厂，SqlSessionFactory是MyBatis的关键对象,它是个单个数据库映射关系经过编译后的内存镜像-->
    <!--如果不配置，在项目启动时，@Repository不生效-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
        <property name="mapperLocations">
            <!-- 添加mapper文件扫包的路径的时候要精确到自己的模块，不要一下全扫，避免开发人员相互之间影响 -->
            <array>
                <value>classpath*:/mybatis.mappers/**/*Mapper.xml</value>
            </array>
        </property>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 添加扫包的路径的时候要精确到自己的模块，不要一下全扫，避免开发人员相互之间影响 -->
        <property name="basePackage" value="com.daniel.service.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

</beans>